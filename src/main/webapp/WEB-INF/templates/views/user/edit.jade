- import turqey.servlet.ServletContextHolder._
- import turqey.entity._
- import turqey.servlet._
- import turqey.utils.Implicits._
- import turqey.utils.Json

-@val u: Option[User]

script(type="text/javascript" src="#{assets}/vender/js/jquery.imgareaselect.min.js")
link(href="#{assets}/vender/css/imgareaselect-animated.css" rel="stylesheet")
script(type="text/javascript" src="#{assets}/vender/js/pica.min.js")
div.container(style="margin-top: 10px;")
  div.row
    div.col.s4
      div()
        a#modal-trigger(href="#modal1")
          img#image(src="#{root}/user/#{u.map(_.id)}/image" style="width: 200px;height: 200px;")
    div.col.s8
      form.col.s12#form(action="#{root}/user/#{u.map(_.id)}" method="post")
        div.row
          - if(!u.isDefined)
            div.input-field.col.s12
              input(type="text" name="loginId" value="#{u.map(_.loginId)}" length="120")
              label ID
          - if(u.isDefined)
            div.input-field.col.s12
              input(type="text" value="#{u.map(_.loginId)}" readonly="true")
              label ID
        div.row
          div.input-field.col.s12
            input(type="text" name="name" value="#{u.map(_.name)}" length="120")
            label Name
        div.row
          div.input-field.col.s12
            input(type="text" name="email" value="#{u.map(_.email)}" length="120")
            label Mail
        div.row
          div.input-field.col.s12
            input(type="text" name="password" length="120")
            label Pass
        div.row
          div.input-field.col.s12
            input.filled-in#filled-in-box{
              :type=>"checkbox",
              :name=>"root",
              :checked=>{u.map(_.root).getOrElse(false)},
              :disabled=>{!(u.map(u => SessionHolder.root && !u.self ).getOrElse(false))} }
            label(for="filled-in-box") 管理者  
        textarea#base64(style="display: none;")
    button.waves-effect.waves-light.btn(type="submit")
      i.material-icons.right check
      |保存
div#modal1.modal.modal-fixed-footer(style="width: 800px;height: 700px;max-height: 700px;")
  div.modal-content
    h4 Modal Header
    div(style="text-align: center;")
      canvas#uploaded
      canvas#origin(style="display: none;")
      canvas#resized(width="200" height="200" style="display: none;")
  div.modal-footer
    a.modal-action.modal-close.waves-effect.waves-grey.btn-flat(href="#!") キャンセル
    a.modal-action.modal-close.waves-effect.waves-grey.btn-flat(href="#!") 決定
:!javascript
  $(document).ready(function(){
    $('#modal1').bind('drop', function(e){
      e.preventDefault();
      var files = e.originalEvent.dataTransfer.files;
      loadFile(files[0], function() {
        var uploaded = document.getElementById('uploaded');
        var origin = document.getElementById('origin');
        origin.width = this.width;
        origin.height = this.height;
        origin.getContext('2d').drawImage(this, 0, 0);
        
        var ratioX = this.width / 750;
        var ratioY = this.height / 500;
        var ratio = ratioX > ratioY ? ratioX : ratioY;
        console.log(ratio);
        
        uploaded.width = this.width / ratio;
        uploaded.height = this.height / ratio;
        uploaded.getContext('2d').drawImage(this, 0, 0, uploaded.width, uploaded.height);
        $(uploaded).imgAreaSelect({
          handles: true,
          onSelectEnd: selectEnd,
          aspectRatio: "1:1"
        });
      });
    }).bind('dragenter dragover', function(){
      return false;
    });
    
    $('#modal-trigger').leanModal({
      dismissible: true,
      complete: function(){ $('#uploaded').imgAreaSelect({ instance: true }).cancelSelection(); }
    });
    
    $('body').bind('drop dragenter dragover', function(e){
      return false;
    });
  });
  
  function selectEnd(img, selection){
    if (!selection.width || !selection.height)
        return;
    
    var origin = document.getElementById('origin');
    var resized   = document.getElementById('resized');
    
    var ratioX = origin.width / 750;
    var ratioY = origin.height / 500;
    var ratio = ratioX > ratioY ? ratioX : ratioY;

    var sourceX = parseInt(selection.x1 * ratio);
    var sourceY = parseInt(selection.y1 * ratio);
    var sourceW = parseInt(selection.width * ratio);
    var sourceH = parseInt(selection.height * ratio);
    
    var srcData = origin.getContext('2d').getImageData(sourceX, sourceY, sourceW, sourceH).data;
    var imageDataTo = resized.getContext('2d').createImageData(200, 200);
    
    pica.resizeBuffer({
        src     : srcData,
        dest    : imageDataTo.data,
        width   : sourceW,
        height  : sourceH,
        toWidth : 200,
        toHeight: 200,
        quality : 3
      },
      function() {
        resized.getContext('2d').putImageData(imageDataTo, 0, 0);
        
        var data = resized.toDataURL('image/png');
        document.getElementById('base64').value = data;
        document.getElementById('image').src = data;
    }); 
  }
  