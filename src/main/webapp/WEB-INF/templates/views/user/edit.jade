- import turqey.servlet.ServletContextHolder._
- import turqey.entity._
- import turqey.servlet._
- import turqey.utils.Implicits._
- import turqey.utils.Json

-@val u: Option[User]

script(type="text/javascript" src="#{assets}/vender/js/jquery.imgareaselect.min.js")
link(href="#{assets}/vender/css/imgareaselect-animated.css" rel="stylesheet")
script(type="text/javascript" src="#{assets}/vender/js/pica.min.js")
div.container(style="margin-top: 10px;")
  div.row
    div.col.s4
      div()
        a.modal-trigger(href="#modal1")
          img#image(src="#{root}/user/#{u.map(_.id)}/image" style="width: 200px;height: 200px;")
    div.col.s8
      form.col.s12#form(action="#{root}/user/#{u.map(_.id)}" method="post")
        div.row
          - if(!u.isDefined)
            div.input-field.col.s12
              input(type="text" name="loginId" value="#{u.map(_.loginId)}" length="120")
              label ID
          - if(u.isDefined)
            div.input-field.col.s12
              input(type="text" value="#{u.map(_.loginId)}" readonly="true")
              label ID
        div.row
          div.input-field.col.s12
            input(type="text" name="name" value="#{u.map(_.name)}" length="120")
            label Name
        div.row
          div.input-field.col.s12
            input(type="text" name="email" value="#{u.map(_.email)}" length="120")
            label Mail
        div.row
          div.input-field.col.s12
            input(type="text" name="password" length="120")
            label Pass
        div.row
          div.input-field.col.s12
            input.filled-in#filled-in-box{
              :type=>"checkbox",
              :name=>"root",
              :checked=>{u.map(_.root).getOrElse(false)},
              :disabled=>{!(u.map(u => SessionHolder.root && !u.self ).getOrElse(false))} }
            label(for="filled-in-box") 管理者  
        textarea#base64(style="display: none;")
    button.waves-effect.waves-light.btn(type="submit")
      i.material-icons.right check
      |保存
  div#modal1.modal.modal-fixed-footer
    div.modal-content#hoge
      h4 Modal Header
      div
        canvas#preview
        canvas#resized(width="200" height="200" style="display: none;")
    div.modal-footer
      a.modal-action.modal-close.waves-effect.waves-green.btn-flat(href="#!") キャンセル
      a.modal-action.modal-close.waves-effect.waves-green.btn-flat(href="#!") 決定
  

:!javascript
  $(document).ready(function(){
    $('.modal-trigger').leanModal();
    $('body').bind('drop', function(e){
      e.preventDefault();
    });
    
    $('#hoge').bind('drop', function(e){
      e.preventDefault();
      var files = e.originalEvent.dataTransfer.files;
      loadFile(files[0], function() {
        var canvas = document.getElementById('preview');
        var context = canvas.getContext('2d');
        canvas.width = this.width;
        canvas.height = this.height;
        context.drawImage(this, 0, 0);
        $('#preview').imgAreaSelect({
          handles: true,
          onSelectChange: crop,
          onSelectEnd: selectEnd,
          aspectRatio: "1:1"
        });
      });
    }).bind('dragenter', function(){
      return false;
    }).bind('dragover', function(){
      return false;
    });
  });
  var delay = (function(){
    var timer = 0;
    return function(callback, ms){
      clearTimeout (timer);
      timer = setTimeout(callback, ms);
    };
  })();
  function crop(img, selection) {
    if (!selection.width || !selection.height)
        return;
        
    delay(function(){selectEnd(img, selection);}, 300);
    
    // draw to canvas.
    var canvas = document.getElementById('resized');
    var context = canvas.getContext('2d');
    var imageObj = document.getElementById('preview');

    var sourceX = selection.x1;
    var sourceY = selection.y1;
    var sourceWidth = selection.width;
    var sourceHeight = selection.height;
    
    var destWidth = 200;
    var destHeight = 200;
    
    var destX = canvas.width / 2 - destWidth / 2;
    var destY = canvas.height / 2 - destHeight / 2;

    context.drawImage(imageObj, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY, destWidth, destHeight);
  }
  function selectEnd(img, selection){
    if (!selection.width || !selection.height)
        return;
        
    var canvas =  document.getElementById('resized');
    var imageObj = document.getElementById('preview');

    var sourceX = selection.x1;
    var sourceY = selection.y1;
    var sourceWidth = selection.width;
    var sourceHeight = selection.height;
    
    var srcData = imageObj.getContext('2d').getImageData(sourceX, sourceY, sourceWidth, sourceHeight).data;
      
    var imageDataTo = canvas.getContext('2d').createImageData(200, 200);
    
    var resizeOpts = {
      src     : srcData,
      dest    : imageDataTo.data,
      width   : sourceWidth,
      height  : sourceHeight,
      toWidth : 200,
      toHeight: 200,
      quality : 3
    };
    
    window.pica.resizeBuffer(resizeOpts, function() {
      canvas.getContext('2d').putImageData(imageDataTo, 0, 0);
      
      var data = canvas.toDataURL('image/png');
      document.getElementById('base64').value = data;
      document.getElementById('image').src = data;
      console.log('Antialeasing Done!!!');
    });
    
  }