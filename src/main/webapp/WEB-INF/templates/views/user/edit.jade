- import turqey.servlet.ServletContextHolder._
- import turqey.entity._
- import turqey.servlet._
- import turqey.utils.Implicits._
- import turqey.utils.Json

-@val u: Option[User]

script(type="text/javascript" src="#{assets}/vender/js/jquery.imgareaselect.min.js")
link(href="#{assets}/vender/css/imgareaselect-animated.css" rel="stylesheet")
script(type="text/javascript" src="#{assets}/vender/js/pica.min.js")
div.container#container(style="margin-top: 10px;")
  div.row
    div.col.s4
      div()
        a#modal-trigger(href="#modal1")
          img#image.z-depth-1(src="#{root}/user/#{u.map(_.id).getOrElse(0)}/image" style="width: 200px;height: 200px;")
    div.col.s8
      form.col.s12#form(action="#{root}/user/#{u.map(_.id)}" method="post")
        div.row
          - if(!u.isDefined)
            div.input-field.col.s12
              input(type="text" name="loginId" value="#{u.map(_.loginId)}" length="120")
              label ID
          - if(u.isDefined)
            div.input-field.col.s12
              input(type="text" value="#{u.map(_.loginId)}" readonly="true")
              label ID
        div.row
          div.input-field.col.s12
            input(type="text" name="name" value="#{u.map(_.name)}" length="120")
            label Name
        div.row
          div.input-field.col.s12
            input(type="text" name="email" value="#{u.map(_.email)}" length="120")
            label Mail
        div.row
          div.input-field.col.s12
            input(type="text" name="password" length="120")
            label Pass
        div.row
          div.input-field.col.s12
            input.filled-in#filled-in-box{
              :type=>"checkbox",
              :name=>"root",
              :checked=>{u.map(_.root).getOrElse(false)},
              :disabled=>{!(SessionHolder.root && u.map(u => !u.self).getOrElse(true))} }
            label(for="filled-in-box") 管理者  
        input#base64(type="text" name="image" style="display: none;")
        button.waves-effect.waves-light.btn(type="submit")
          i.material-icons.right check
          |保存
  div#modal1.modal.modal-fixed-footer(style="width: 800px;height: 600px;max-height: 600px;")
    div.modal-content
      h4 画像を選択
      div(style="text-align: center;")
        div#beforeupload(style="margin-top: 200px;")
          p
            i.material-icons.large photo_library
          p 画像ファイルをドラッグ
          p または
          p
            a.btn.waves-effect.waves-light(data-bind="click: fileInput") ファイルを選択
            input#fileInput(type="file" style="display: none;" data-bind="event: {change: fileSelect}")
        canvas#uploaded.z-depth-1(style="display: none;")
      canvas#origin(style="display: none;")
      canvas#cropped(width="200" height="200" style="display: none;")
    div.modal-footer
      a.modal-action.waves-effect.waves-grey.btn-flat(data-bind="click: imgCancel") キャンセル
      a.modal-action.waves-effect.waves-grey.btn-flat(data-bind="click: imgOk") 決定
:!javascript
  
  var readFile = function(e){
    e.preventDefault();
    var files = (e.target && e.target.files)? e.target.files: e.originalEvent.dataTransfer.files;
    
    loadImageFile(files[0], function() {
      $('#beforeupload').toggle(false);
      $('#uploaded').toggle(true);
      
      var uploaded = document.getElementById('uploaded');
      var origin = document.getElementById('origin');
      origin.width = this.width;
      origin.height = this.height;
      origin.getContext('2d').drawImage(this, 0, 0);
      
      var ratio = getRatio();
      
      uploaded.width = parseInt(this.width / ratio);
      uploaded.height = parseInt(this.height / ratio);
      uploaded.getContext('2d').drawImage(this, 0, 0, uploaded.width, uploaded.height);
      
      $(uploaded).toggle(true);
      
      var imgSelect = $(uploaded).imgAreaSelect({
        persistent: true,
        handles: true,
        onSelectEnd: selectEnd,
        aspectRatio: "1:1",
        instance: true
      });
      
      var selectionSize = (function(a, b){
        return a < b ? a: b;
      })(uploaded.width * 0.8, uploaded.height * 0.8);
      
      imgSelect.setSelection(
        (uploaded.width - selectionSize) / 2,
        (uploaded.height - selectionSize) / 2,
        (uploaded.width - selectionSize) / 2 + selectionSize,
        (uploaded.height - selectionSize) / 2 + selectionSize);
      imgSelect.setOptions({ show: true });
      imgSelect.update();
      selectEnd(imgSelect, imgSelect.getSelection());
    });
  };
  
  $(document).ready(function(){
    $('#modal1').bind('drop', readFile).bind('dragenter dragover', function(){
      return false;
    });
    
    $('#modal-trigger').leanModal({
      dismissible: true,
      complete: function(){ $('#uploaded').imgAreaSelect({ instance: true }).cancelSelection(); }
    });
    
    $('body').bind('drop dragenter dragover', function(e){
      return false;
    });
  });
  
  function getRatio(origin){
    origin = origin || document.getElementById('origin');
    var ratioX = origin.width / 750;
    var ratioY = origin.height / 400;
    var ratio = ratioX > ratioY ? ratioX : ratioY;
    return ratio > 1? ratio: 1;
  }
  
  function selectEnd(img, selection){
    if (!selection.width || !selection.height)
        return;
    
    var origin = document.getElementById('origin');
    var cropped   = document.getElementById('cropped');
    
    var ratio = getRatio();

    var sourceX = parseInt(selection.x1 * ratio);
    var sourceY = parseInt(selection.y1 * ratio);
    var sourceW = parseInt(selection.width * ratio);
    var sourceH = parseInt(selection.height * ratio);
    
    var srcData = origin.getContext('2d').getImageData(sourceX, sourceY, sourceW, sourceH).data;
    var imageDataTo = cropped.getContext('2d').createImageData(200, 200);
    
    pica.resizeBuffer({
        src     : srcData,
        dest    : imageDataTo.data,
        width   : sourceW,
        height  : sourceH,
        toWidth : 200,
        toHeight: 200,
        quality : 3
      },
      function() {
        cropped.getContext('2d').putImageData(imageDataTo, 0, 0);
    }); 
  }
  
  var ViewModel = function(){
    var self = this;
    
    this.fileInput = function(){
      document.getElementById('fileInput').click();
    };
    
    this.fileSelect = function(m, e){
      readFile(e);
    };
    
    function clearRect(canvas){
      canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
    }
    
    this.resetImg = function(){
      clearRect(document.getElementById('uploaded'));
      clearRect(document.getElementById('origin'));
      clearRect(document.getElementById('cropped'));
      document.getElementById('fileInput').value = '';
      $('#beforeupload').toggle(true);
      $('#uploaded').toggle(false);
    };
    
    this.imgOk = function() {
      var data = cropped.toDataURL('image/png');
      document.getElementById('base64').value = data;
      document.getElementById('image').src = data;
      self.resetImg();
      $('#uploaded').imgAreaSelect({ instance: true }).cancelSelection();
      $('#modal1').closeModal();
    };
    
    this.imgCancel = function() {
      self.resetImg();
      $('#uploaded').imgAreaSelect({ instance: true }).cancelSelection();
      $('#modal1').closeModal();
    };
    
  };
  
  // Activates knockout.js
  var vm = new ViewModel();
  ko.applyBindings(vm, document.getElementById('container'));
  
