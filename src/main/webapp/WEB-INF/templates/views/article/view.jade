- import turqey.servlet.ServletContextHolder._
- import turqey.servlet._
- import turqey.entity._
- import turqey.utils.Implicits._
- import turqey.controller._
- import org.joda.time.{DateTime}
- import turqey.utils.Markdown

-@val article:    Article
-@val content:    String
-@val latestEdit: Option[DateTime]
-@val tags:       Seq[Tag]
-@val comments:   Seq[ArticleComment]
-@val stockers:   Seq[User] = Seq()
-@val stocked:    Boolean
-@val count:      Long

-@val ownerId: Long = article.owner.get.id

script(type="text/javascript" src="#{assets}/vender/js/jquery.toc.min.js")

div.articleHeader
  div.container
    div.row
      div.col.s8
        p
          h2 #{article.title}
        p
          span
            a(href="#{root}/user/#{ownerId}")
              img(src="#{root}/user/#{ownerId}/image" style="width: 20px;height: 20px;")
              | #{article.owner.get.name}
            |が #{article.created.toString("yyyy/MM/dd")} に投稿
          |#{latestEdit.map( _.toString("yyyy/MM/dd") + "に更新")}

        p
          - for (tag <- tags)
            div.chip
              a(href="#{root}/tag/#{tag.id}") #{tag.name}
        
        - if(article.editable)
          p
            a.waves-effect.waves-light.btn(href="#{root}/article/#{article.id}/edit")
              i.material-icons.right edit
              |編集
      
      div.col.s4.right-align#divStock
        p
          span(data-bind="text: count")
          | ストック
        - if(SessionHolder.user.get.id != article.ownerId)
          p
            button.waves-effect.waves-light.btn(
              type="button"
              style="display: none"
              data-bind="click: toggleStock, visible: stocked")
              i.material-icons.right cancel
              |解除
            button.waves-effect.waves-light.btn(
              type="button"
              style="display: none"
              data-bind="click: toggleStock, visible: !stocked()")
              i.material-icons.right folder
              |ストック
        p
          - for (st <- stockers)
            a(href="#{root}/user/#{st.id}")
              img(src="#{root}/user/#{st.id}/image" style="width: 20px;height: 20px;")
            | 

div.container
  div.row
    div.markdown.col.s10.m9.l00#main_content
      div
        ! #{content}
    div.col.hide-on-small-only.m3.l3
      ul.section.table-of-contents.scrollspy#toc
  hr
  div.row
    div.col.s10
      i.material-icons comment
      |コメント
  div.row
    - for(comment <- comments)
      div.card
        - if(comment.editable)
          div.fixed-action-btn.horizontal(style="position: absolute; display: inline-block; right: 24px; top: 10px;")
            form(action="#{root}/article/#{article.id}/comment/#{comment.id}/delete" method="post" style="display: inline;")
              button.btn-floating.btn.red
                i.small.material-icons delete
        div.card-content.markdown
          span.card-title
            a(href="#{root}/user/#{comment.userId}")
              img(src="#{root}/user/#{comment.userId}/image" style="width: 40px; height: 40px;")
              | #{comment.user.get.name}
            | #{comment.created.toString("yyyy/MM/dd")}
          ! #{Markdown.html(comment.content)}
  
  div.row
    form#formComment(action="#{root}/article/#{article.id}/comment" method="post")
      div.input-field.col.s12
        div(data-bind="visible: editting")
          textarea.materialize-textarea#input_comment(name="comment"
            placeholder="Markdown"
            data-bind="textInput: comment")
          label Comment
        div.markdown(data-bind="visible: !editting(), html: preview")

      div.input-field.col.s12
        button.waves-effect.waves-light.btn(type="submit" data-bind="enable: commentable")
          i.material-icons.right send
          |コメント
        button.waves-effect.waves-light.btn.right(type="button"
          data-bind="visible: editting, click: togglePreview")
          i.material-icons.right search
          |プレビュー
        button.waves-effect.waves-light.btn.right(type="button"
          data-bind="visible: !editting(), click: togglePreview")
          i.material-icons.right arrow_back
          |戻る

:&javascript
  var ViewModel = function (initialState){
    var self = this;
    self.stocked = ko.observable(initialState);
    self.toggleStock = function (obj, e){
      $.post('#{root}/article/#{article.id}/stock', function(dat){
        self.stocked(!self.stocked());
        self.count(dat.count);
      });
    };
    self.count = ko.observable(#{count});
  };

  var CommentViewModel = function (){
    var self = this;
    self.comment = ko.observable('');
    self.commentable = ko.pureComputed( function (){ return self.comment().length != 0; } );

    self.preview = ko.observable('');
    self.editting = ko.observable(true);
    self.togglePreview = function (){
      if (self.editting()){
        $.post(
          '#{root}/api/markdown',
          { content: self.comment() },
          function(response) {
            self.preview(response);
            Prism.highlightAll();
          }
        );
      }
      self.editting(!self.editting());
    };
    
  };
  // Activate knockout.js
  var vm = new ViewModel(#{stocked.toString});
  var commentVm = new CommentViewModel();
  ko.applyBindings(vm, document.getElementById('divStock'));
  ko.applyBindings(commentVm, document.getElementById('formComment'));

  $(document).ready(function(){
    $("#toc").toc({content: "#main_content"});
    $('#toc').pushpin({ top: $('#toc').offset().top });
    $('.scrollspy').scrollSpy();
  });
