- import turqey.servlet.ServletContextHolder._
- import turqey.entity._
- import turqey.utils.Implicits._
- import turqey.utils.Json

-@val article:      Option[Article]
-@val title:        String
-@val content:      String
-@val tags:         Seq[Tag]
-@val attachments:  Seq[Tag] = Seq()
-@val head:         String

:css
  html, body { height:100%; margin:0; }

link(href="#{assets}/vender/css/knockout.autocomplete.css" rel="stylesheet")

script(type="text/javascript" src="#{assets}/vender/ace/ace.js")
script(type="text/javascript" src="#{assets}/vender/js/diffDOM.js")
script(type="text/javascript" src="#{assets}/vender/js/paste.js")
script(type="text/javascript" src="#{assets}/vender/js/jquery.scrollTo.min.js")

script(type="text/javascript" src="#{assets}/vender/js/CsvToMarkdown.js")

form.col.s12#form(action="#{root}/article/#{article.map(_.id)}" method="post")
  div.row
    div.input-field.col.s8
      input#input_title(type="text" name="title" 
        length="120"
        data-bind="textInput: title")
        label Title
    div.input-field.col.s4.right-align
      button.waves-effect.waves-light.btn(
        data-bind="enable: postable, click: saveAsDraft" disabled)
        i.material-icons.right save
        |保存
      button.waves-effect.waves-light.btn(type="submit"
        data-bind="enable: postable, click: beforeSubmit" disabled)
        i.material-icons.right publish
        |公開
  input(type="hidden" name="id" data-bind="value: articleId")
  div(data-bind="foreach: attachments" style="display: none;")
    input(type="hidden" name="attIds"    data-bind="value: id")
    input(type="hidden" name="attNames"  data-bind="value: name")
    input(type="hidden" name="attMimes"  data-bind="value: mime")
    input(type="hidden" name="attIsImgs" data-bind="value: isImage")
    input(type="hidden" name="attSizes"  data-bind="value: size")
  div.row
    div.input-field.col.s3
      i.material-icons.prefix search
      input#find_tag(type="text" placeholder="タグ検索(Enterで確定)" autocomplete="off"
        data-bind="event: {keypress: onEnter}, textInput: tagText, autocomplete: { data: allTags, format: formatTagItem, onSelect: select, visible: autoCompleteVisible } ")
      label Tag
    div.input-field.col.s9
      / ko foreach: tags
      div.chip
        span(data-bind="text: name")
        input(type="hidden" name="tagIds"   data-bind="value: id")
        input(type="hidden" name="tagNames" data-bind="value: name")
        i.material-icons(data-bind="click: $root.remove") close
      / /ko
  
  div(style="position: absolute; top: 230px; bottom: 40px; width: 100%; background-color: white; z-index: 2;" data-bind="style: {top: editorTop}")
    div(style="height: 36px; width: 100%;border-top: 1px solid #D0D0D0; border-bottom: 1px solid #D0D0D0;")
      a.dropdown-button.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-activates="langs" data-constrainwidth="false")
        i.small.material-icons code
      a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: insertLink")
        i.small.material-icons link
      a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: insertPhoto")
        i.small.material-icons insert_photo
      a.waves-effect.waves-grey.btn-flat.modal-trigger(href="#modal1" style="padding: 0 1rem;")
        i.small.material-icons grid_on
      div.right
        a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: shiftToPreview, css: {disabled: unshiftableToPreview}")
          i.small.material-icons chevron_left
        a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: shiftToEditor, css: {disabled: unshiftableToEditor}")
          i.small.material-icons chevron_right
        a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: fullscreen, visible: !isFullscreen()")
          i.small.material-icons fullscreen
        a.waves-effect.waves-grey.btn-flat(style="padding: 0 1rem;" data-bind="click: exitFullscreen, visible: isFullscreen")
          i.small.material-icons fullscreen_exit
    div#editor_container(style="float: left; height: 100%; border-right: 1px solid #E0E0E0;" data-bind="style: {width: editorWidth}, visible: !(unshiftableToPreview())")
      div.editor#input_content(
        style="height: 100%; width: 100%;"
        data-bind="ace: content, aceOptions: { mode: 'markdown', theme: 'eclipse', fontSize: '14px', change: changeContent }")
      textarea(name="content" data-bind="value: content" style="display: none;")
      label.active(for="input_content")
    div#prev_container(style="overflow: auto; height: 100%;" data-bind="style: {width: previewWidth}, visible: !(unshiftableToEditor())")
      div
        div#preview.markdown(data-bind="html: marked")
  ul#langs.dropdown-content(style="max-height: 300px; overflow-x: hidden;")
    / ko foreach: langs
    li
      a(data-bind="text: name, click: $root.insertLang")
    / /ko
  div#modal1.modal.modal-fixed-footer
    div.modal-content
      h4 Table
      p
        textarea#textarea1.materialize-textarea(data-bind="value: contentCsv")
      p
        input.filled-in#first_header(type="checkbox" data-bind="checked: setFirstLineAsHeader")
        label(for="first_header") 先頭行をヘッダとする
        input(name="sep_char" type="radio" id="sep_comma" value="c" data-bind="checked: sepChar")
        label(for="sep_comma") カンマ
        input(name="sep_char" type="radio" id="sep_tab" value="t" data-bind="checked: sepChar")
        label(for="sep_tab") タブ
    div.modal-footer
      a.modal-action.modal-close.waves-effect.waves-grey.btn-flat(href="#!" data-bind="click: insertTable") 実行

:!javascript
  $(document).ready(function(){
    $('#editor_container')
    .bind('drop', function(e){
      e.preventDefault();
      var files = (e.target && e.target.files)? e.target.files: e.originalEvent.dataTransfer.files;
      for(var i = 0; i < files.length; i++) {
        if (files[i].size > 5 * 1024 * 1024){
          alert('5Mまでです');
          return;
        }
      };

      var formData = new FormData();
      $.each(files, function() {
        formData.append("file", this);
      });
      $.ajax({
        url:         '#{root}/upload/attach/',
        method:      'post',
        processData: false,
        data:        formData,
        contentType: false
      }).done(function(response) {
        var editor = vm.getEditor();
        var editSession = editor.getSession();
        $.each(response, function() {
          vm.attachments.push(this);
          editSession.insert(
            editor.getSelection().getCursor(), 
            (this.isImage ? '!' : '') + '[' + this.name + '(' + parseInt(this.size / 1024) + 'KB)](#{root}/upload/attach/' + this.id + '/)\n'
          );
        });
      });
    })
    .bind('dragenter dragover', function(){
      return false;
    });
  });
  var allTags = #{ Json.toJson(Tag.findAll()) };
  var ViewModel = function (initialTags){
    var self = this;
    self.tags = ko.observableArray(initialTags);
    self.commit = ko.observable(#{ Json.toJson(head) });
    self.remove = function (obj, e){
      self.tags.remove(obj);
    };
    self.articleId = ko.observable(#{ article.map(_.id).getOrElse("null") });
    self.add = function(obj, e){
      e && e.preventDefault();
      if (!self.tagText().trim()){ return };
      self.tags.push({id: self.tagId(), name: self.tagText()});
      self.tagText('');
      self.tagId('');
    };
    self.onEnter = function(obj, e){
      e.keyCode === 13 && self.add(obj, e);
      return true;
    };
    self.tagText = ko.observable('');
    self.tagId = ko.observable('');
    self.allTags = allTags;
    self.formatTagItem = function(i) { return i.name; };
    self.select = function(i) {
      if (self.autoCompleteVisible()){
        self.tagText(self.formatTagItem(i));
        self.tagId(i.id);
      }
      self.add();
    };
    self.autoCompleteVisible = ko.observable(false);

    var delay = (function(){
      var timer = 0;
      return function(callback, ms){
        clearTimeout (timer);
        timer = setTimeout(callback, ms);
      };
    })();
    self.marked = ko.observable("");
    self.changeContent = function(){
      delay(function(){
        $.post(
          '#{root}/api/markdown',
          { content: self.getEditor().getValue() },
          function(response) {
            var prev = $($('#preview').parent().html())[0];
            
            self.marked(response);
            
            Prism.highlightAll();
            
            var current = $('#preview')[0];
            
            var dd = new diffDOM();
            var diffs = dd.diff(prev, current);

            // sync scroll
            var elem;
            while (true){
              if (diffs.length === 0){ break; }
              
              var diff = diffs.shift();
              
              if (diff.action === "modifyAttribute" && diff.newValue.trim() === diff.oldValue.trim() ){
                continue;
              }
              
              var elem = $(dd.getFromRoute(current, diff.route));
              if (elem.length === 0){
                continue;
              }
              
              while (elem.offset().left === 0){
                elem = elem.parent();
                if (elem.attr('id') === 'preview'){
                  break;
                }
              }
              if (elem.attr('id') === 'preview'){
                continue;
              }
              
              $('#prev_container').scrollTo(elem);
              
              break;
            }
            
          }
      )}, 800);
    };

    self.attachments = ko.observableArray(#{Json.toJson(attachments)});
    
    self.langs = ko.observableArray([
      {name: 'bash'},
      {name: 'batch'},
      {name: 'csharp'},
      {name: 'css'},
      {name: 'd'},
      {name: 'git'},
      {name: 'go'},
      {name: 'groovy'},
      {name: 'haskell'},
      {name: 'java'},
      {name: 'javascript'},
      {name: 'kotlin'},
      {name: 'latex'},
      {name: 'markdown'},
      {name: 'markup'},
      {name: 'ocaml'},
      {name: 'perl'},
      {name: 'php'},
      {name: 'powershell'},
      {name: 'python'},
      {name: 'ruby'},
      {name: 'scala'},
      {name: 'sql'},
      {name: 'swift'},
      {name: 'typescript'},
      {name: 'yaml'}
    ]);
    
    self.insertLang = function(lang){
      (function(editor){
        var selection = editor.getSelection();
        var row = selection.getCursor().row;
        editor.getSession().insert({ row: row + 1, column: 0 }, "```" + lang.name + "\r\nInsert_Code_Here\r\n```");
        selection.setSelectionRange({start:{row: row + 1, column: 0}, end:{row: row + 1, column:20}});
      })(self.getEditor())
    };
    
    self.editor = null;
    self.getEditor = function(){
      if (!self.editor) {
        self.editor = ace.edit("input_content");
        
        $('.ace_text-input').pastableTextarea()
        .on('pasteImage', function (ev, data){
          var formData = new FormData();
          formData.append("file", data.blob, new Date().getTime());
          $.ajax({
            url:         '#{root}/upload/attach/',
            method:      'post',
            processData: false,
            data:        formData,
            contentType: false
          }).done(function(response) {
            var editor = self.editor;
            var editSession = editor.getSession();
            $.each(response, function() {
              vm.attachments.push(this);
              editSession.insert(
                editor.getSelection().getCursor(), 
                '![' + this.name + '](#{root}/upload/attach/' + this.id + '/)'
              );
            });
          });
        });
      }
      return self.editor;
    };
    self.getEditor();
    
    self.insertLink = function(){
      var editor = self.getEditor();
      var range = editor.selection.getRange();
      
      if (range.isEmpty()) {
        editor.getSession().insert(editor.getSelection().getCursor(), "[text](url)");
      }
      else {
        var lines = editor.getSession().doc.getLinesForRange(range);
        
        var queries = [];
        for (var i in lines){
          queries.push("select * from html where url = '" + lines[i] + "' and (xpath='/html/head')");
        }
        
        var query = 'select * from yql.query.multi where queries = \"' + queries.join(";") + '\"';
        
        $.get("https://query.yahooapis.com/v1/public/yql?format=json&q=" + encodeURIComponent(query),
          function(response) {
            var replaceTexts = [];
            
            var results = response.query.results.results;
            if (!$.isArray(results)){
              results = [results];
            }
            
            for (var i in results){
              var result = results[i];
              var head = result ? result.head:null;
              replaceTexts.push( head ? "[" + head.title + "](" + lines[i] + ")": lines[i] );
            }
            
            editor.getSession().replace(editor.selection.getRange(), replaceTexts.join("\r\n"));
          }
        );
      }
        
    };
    self.insertPhoto = function(){
      var editor = self.getEditor();
      var range = editor.selection.getRange();
      
      if (range.isEmpty()) {
        editor.getSession().insert(editor.getSelection().getCursor(), "![alt_text](image_url)");
      }
      else {
        var selectedText = editor.getSession().doc.getTextRange(editor.selection.getRange());
        editor.getSession().replace(editor.selection.getRange(), "![alt_text](" + selectedText + ")");
      }
    };
    self.insertTable = function(){ 
      (function(editor){
        editor.getSession().insert(editor.getSelection().getCursor(), csvToMarkdown(self.contentCsv(), {"c": ",", "t":"\t"}[self.sepChar()], self.setFirstLineAsHeader()))
      })(self.getEditor());
      self.contentCsv("");
    };
    self.saveAsDraft = function(){
      var params = { content: self.getEditor().getValue(), title: self.title() };
      if (self.articleId())
        params.id = self.articleId();
      
      var tagIds = [];
      var tagNames = [];
      $.each(self.tags(), function() {
        tagIds.push(this.id);
        tagNames.push(this.name);
      });
      params.tagIds = tagIds;
      params.tagNames = tagNames;

      var attIds    = [];
      var attNames  = [];
      var attMimes  = [];
      var attIsImgs = [];
      var attSizes  = [];
      $.each(self.attachments(), function() {
        attIds.push(this.id);
        attNames.push(this.name);
        attMimes.push(this.mime);
        attIsImgs.push(this.isImage);
        attSizes.push(this.size);
      });
      params.attIds    = attIds;
      params.attNames  = attNames;
      params.attMimes  = attMimes;
      params.attIsImgs = attIsImgs;
      params.attSizes = attSizes;
      
      $.post(
        '#{root}/article/draft/',
        params,
        function(response) {
          self.articleId(response.articleId);
        }
      );
    };
    
    // 0: editorOnly, 1: half, 2: previewOnly
    self.toggleState = ko.observable(1);
    self.shiftToEditor = function() { var state = self.toggleState(); if (state !== 0){ self.toggleState(--state) }  };
    self.shiftToPreview = function() { var state = self.toggleState(); if (state !== 2){ self.toggleState(++state) }  };
    self.unshiftableToEditor = ko.pureComputed( function(){ return self.toggleState() === 0; } );
    self.unshiftableToPreview = ko.pureComputed( function(){ return self.toggleState() === 2; } );
    self.editorWidth = ko.pureComputed( function(){ return ["100%", "50%", "0%"][self.toggleState()]; } );
    self.previewWidth = ko.pureComputed( function(){ return ["0%", "50%", "100%"][self.toggleState()]; } );
    self.editorVisible = ko.pureComputed( function(){ return ["100%", "50%", "0%"][self.toggleState()]; } );
    self.previewVisible = ko.pureComputed( function(){ return ["0%", "50%", "100%"][self.toggleState()]; } );

    self.isFullscreen = ko.observable(false);
    self.fullscreen = function(){ self.isFullscreen(true);self.getEditor().resize(); };
    self.exitFullscreen = function(){ self.isFullscreen(false);self.getEditor().resize(); };
    self.editorTop = ko.pureComputed(function(){ return self.isFullscreen()? "0px": "230px"; });

    self.title = ko.observable(#{Json.toJson(title)});
    self.content = ko.observable(#{Json.toJson(content)});
    self.contentCsv = ko.observable("");
    self.setFirstLineAsHeader = ko.observable(true);
    self.sepChar = ko.observable("c");
    self.postable = ko.pureComputed( function (){ return !(!self.content() || self.content().length == 0 || !self.title() || self.title().length == 0); } );
    self.beforeSubmit = function (){ $(window).unbind("beforeunload"); return true; };
  };

  // Activates knockout.js
  var vm = new ViewModel(#{Json.toJson(tags)});
  ko.applyBindings(vm, document.getElementById('form'));

  $('.modal-trigger').leanModal();
  $(window).bind("beforeunload", function() {
    return "保存せずに移動しますか？";
  });

