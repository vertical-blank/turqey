- import turqey.servlet.ServletContextHolder._
- import turqey.utils.Json

-@val articleIds:   Seq[Seq[scala.Long]] 
-@val stockIds:     Seq[Seq[scala.Long]]
-@val ownIds:       Seq[Seq[scala.Long]]
-@val commentedIds: Seq[Seq[scala.Long]]
-@val followingIds: Seq[Seq[scala.Long]]

div.container#container
  p CSV知識を共有しよう。
  p
    a.waves-effect.waves-light.btn(href="#{root}/article/edit")
      i.material-icons.right edit
      |新規作成
  div.row
    div.col.s12
      ul.tabs
        li.tab.col
          a.waves-effect.active(data-bind="click: showWhole") 全ての投稿
        li.tab.col
          a.waves-effect(data-bind="click: showFollowing") フォロー中
        li.tab.col
          a.waves-effect(data-bind="click: showStock") ストック
        li.tab.col
          a.waves-effect(data-bind="click: showCommented") コメントした投稿
        li.tab.col
          a.waves-effect(data-bind="click: showOwn") 自分の投稿
    / ko foreach: tabs
    div(data-bind="visible: (name == $root.selectedTab())")
      div.col.s12(data-bind="foreach: articles")
        div.card
          div.card-content
            span.card-title
              a(data-bind="text: title, attr: { href: '#{root}/article/' + id }")
            span.right
              i.material-icons folder
              span(data-bind="text: stock")
            span.right
              i.material-icons comment
              span(data-bind="text: comment")
            p
              a(data-bind="text: owner.name, attr: {href: '#{root}/user/' + owner.id}")
              |作成:
              span(data-bind="text: created")
              span(data-bind="text: '更新: ' + updated, visible: updated !== ''")
            p
              div(data-bind="foreach: tags")
                div.chip
                  a(data-bind="text: name, attr: { href: '#{root}/tag/' + id }")
      div.col.s12.center-align
        button.waves-effect.waves-light.btn(data-bind="visible: showNext, click: append" style="display: none;") もっと見る
        div.preloader-wrapper.big.active(data-bind="visible: isLoading" style="display: none;")
          div.spinner-layer.spinner-blue-only
            div.circle-clipper.left
              div.circle
            div.gap-patch
              div.circle
            div.circle-clipper.right
              div.circle
    / /ko

:&javascript
  var ViewModel = function (){
    var self = this;
    
    var TabModel = function (name, ids){
      var self = this;
      
      self.name = name;
      self.ids = ko.observableArray(ids);
      self.articles = ko.observableArray([]);
      
      self.append = function() {
        self.isLoading(true);
        $.post('#{root}/api/article/list', { ids: self.ids.shift() }, function (response){ self.articles(self.articles().concat(response));self.isLoading(false);; } );
      };
      self.isLoading = ko.observable(false);
      self.load = function() {
        if (!self.articles().length){ self.append(); }
      };
      self.showNext = ko.pureComputed(function (){ return (self.ids().length !== 0) && !self.isLoading(); });
    };
    
    self.allIds       = #{Json.toJson( articleIds )};
    self.followingIds = #{Json.toJson( followingIds )};
    self.stockIds     = #{Json.toJson( stockIds )};
    self.commentedIds = #{Json.toJson( commentedIds )};
    self.ownIds       = #{Json.toJson( ownIds )};
    
    self.whole     = new TabModel("whole", self.allIds);
    self.following = new TabModel("following", self.followingIds);
    self.stock     = new TabModel("stock", self.stockIds);
    self.commented = new TabModel("commented", self.commentedIds);
    self.own       = new TabModel("own",   self.ownIds);
    
    var tabs = [self.whole, self.following, self.stock, self.commented, self.own];
    (function() {
      for (var i = 0;i < tabs.length;i++){
        tabs[i].load();
      }
    })();
    
    self.tabs = ko.observableArray(tabs);
    
    self.selectedTab = ko.observable('whole');
    
    self.showWhole     = function (){ self.selectedTab("whole");    self.whole.load(); };
    self.showStock     = function (){ self.selectedTab("stock");    self.stock.load(); };
    self.showFollowing = function (){ self.selectedTab("following");self.following.load(); };
    self.showCommented = function (){ self.selectedTab("commented");self.commented.load(); };
    self.showOwn       = function (){ self.selectedTab("own");      self.own.load(); };
  };


  // Activates knockout.js
  var vm = new ViewModel();
  ko.applyBindings(vm, document.getElementById('container'));

